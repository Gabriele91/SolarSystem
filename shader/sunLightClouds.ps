uniform sampler2D cloudTexture;
varying vec3 N;
varying vec3 v;
varying vec2 varTexCoord;
varying float constantAttenuation;
varying float linearAttenuation;
varying float quadraticAttenuation;

void main (void)
{

	//calculate pos linght
	vec3 posL = gl_LightSource[0].position.xyz - v;
	//calculate distance
	float distL = length(posL); 
	//directions
	vec3 L = normalize( posL ); 
	vec3 E = normalize(-v); // we are in Eye Coordinates, so EyePos is (0,0,0)
	vec3 R = normalize(-reflect(L,N));

	//calculate Ambient Term:
	vec4 Iamb = gl_FrontLightProduct[0].ambient * gl_FrontMaterial.ambient;

	//calculate Diffuse Term:
	vec4 Idiff = gl_FrontLightProduct[0].diffuse  * gl_FrontMaterial.diffuse;
	
	// calculate Specular Term:
	vec4 Ispec = gl_FrontLightProduct[0].specular * gl_FrontMaterial.specular * pow(max(dot(R,E),0.0),0.3*gl_FrontMaterial.shininess);
				
	// calculate attenuation
	float attenuation = 1.0/ ( constantAttenuation + 
							  (linearAttenuation*distL) + 
							  (quadraticAttenuation*distL*distL) );
	//calculate attenuation
	Idiff*=attenuation;
	Ispec*=attenuation;
							  
	// get color texture
	float shadow	 = dot(N,L)+1.0*0.25;
	vec4 texcolor    = texture2D( cloudTexture, varTexCoord );
	vec4 lerpcolor   = lerp(vec4(0.0,0.0,0.0,1.0),texcolor,shadow);

	gl_FragColor.rgb = (Iamb+lerpcolor*Idiff+Ispec*shadow).rgb; 
	gl_FragColor.a = texcolor.a; 
}