
uniform sampler2D planetTexture;
uniform sampler2D planetNightTexture;
uniform sampler2D planetSpecularTexture;

uniform sampler2D cloudTexture;

uniform sampler1D atmGrad1;
uniform sampler1D atmGrad2;
uniform sampler1D atmRim;

varying vec3  N;
varying vec3  v;
varying vec2  varTexCoord;
varying vec2  varTexCoordClouds;
varying float constantAttenuation;
varying float linearAttenuation;
varying float quadraticAttenuation;

vec4 toliner(vec4 color){
    //sRGB to Linear RGB
    return vec4( pow (color.xyz, vec3(1.0 / 2.2)), color.w );
}
void outcolor(vec4 color){
    //sRGB to Linear RGB
    gl_FragColor = color;
}


void main (void)
{

	//calculate pos linght
	vec3 posL = gl_LightSource[0].position.xyz - v;
	//calculate distance
	float distL = length(posL); 
	//directions
	vec3 L = normalize( posL ); 
	vec3 E = normalize(-v); // we are in Eye Coordinates, so EyePos is (0,0,0)
	vec3 R = normalize(-reflect(L,N));

	//calculate Ambient Term:
	vec4 Iamb = gl_FrontLightProduct[0].ambient * gl_FrontMaterial.ambient;

	//calculate Diffuse Term:
	vec4 Idiff = gl_FrontLightProduct[0].diffuse  * gl_FrontMaterial.diffuse;

	// calculate Specular Term:
    float shininess = pow(max(dot(R,E),0.0), 0.3 * gl_FrontMaterial.shininess );
	vec4  Ispec = gl_FrontLightProduct[0].specular * gl_FrontMaterial.specular * shininess;
    
	// get and set specular map
	Ispec *= texture2D( planetSpecularTexture, varTexCoord ).r;
	
	// calculate attenuation
	float attenuation = 1.0/ ( constantAttenuation + 
							  (linearAttenuation*distL) + 
							  (quadraticAttenuation*distL*distL) );
	//calculate attenuation
	Idiff*=attenuation;
	Ispec*=attenuation;
	
	//////////////////////////////////////////////////////////////
	float cameraIntensity     = (dot(N,E)+1.0)*0.5;
	float lightIntensity      = (dot(N,L)+1.0)*0.5;
    vec4  black               = vec4( vec3(0.0),1.0 ); 
	float shadow              = max( dot(N,L), 0.0  );
    vec4  outColor            = black;
	//////////////////////////////////////////////////////////////
	//texture color:
	vec4 dayColor   = texture2D( planetTexture, varTexCoord );
	vec4 nightColor = texture2D( planetNightTexture, varTexCoord );
	//////////////////////////////////////////////////////////////
	vec4 cloudTexColor   = texture2D( cloudTexture, varTexCoordClouds );
	vec4 cloudColor      = lerp( black, cloudTexColor, shadow);
    //////////////////////////////////////////////////////////////
    //sfere color
	vec4   colorATM1   = texture1D( atmGrad1, lightIntensity ) * 0.78;
           colorATM1   = lerp     ( black, colorATM1, shadow );
	       colorATM1.a*= texture1D( atmRim, cameraIntensity ).r;
    //day to night
	vec4   colorATM2   = texture1D( atmGrad2, lightIntensity );
           colorATM2   = lerp     ( black, colorATM2, max( dot(N,L)*8.0, 0.0 ) ) * 0.65;
           
    vec4 atmColor      = lerp( colorATM2, colorATM1, min(colorATM2.r, 1.0) ) * attenuation;
    //////////////////////////////////////////////////////////////
    //add texture day/night
	outColor      = lerp( nightColor, dayColor, shadow );
    outColor      = toliner(vec4( (Iamb+outColor*Idiff+Ispec*shadow).rgb, outColor.a ));

    //add clouds GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA
    cloudColor    = toliner(vec4( (Iamb+cloudColor*Idiff+Ispec*shadow).rgb, cloudTexColor.a ));
    outColor.rgb  = saturate(cloudColor.rgb*(cloudTexColor.a)+outColor.rgb*(1.0-cloudTexColor.a));

    //add atmosphere GL_SRC_ALPHA, GL_ONE    
	atmColor        = toliner(atmColor);
	outColor.rgb    = saturate(atmColor.rgb*(atmColor.a)+outColor.rgb);
    
    //out color
    outcolor(outColor);

}