uniform sampler1D atmGrad1;
uniform sampler1D atmGrad2;
uniform sampler1D atmRim;

varying vec3 N;
varying vec3 v;
varying vec2 varTexCoord;
varying float constantAttenuation;
varying float linearAttenuation;
varying float quadraticAttenuation;

void outcolor(vec4 color){
    //sRGB to Linear RGB
    gl_FragColor = vec4( pow (color.xyz, vec3(1.0 / 2.2)), color.w );
}

void main (void)
{

	//calculate pos linght
	vec3 posL = gl_LightSource[0].position.xyz - v;
	//calculate distance
	float distL = length(posL); 
	//directions
	vec3 L = normalize( posL ); 
	vec3 E = normalize(-v); // we are in Eye Coordinates, so EyePos is (0,0,0)
	vec3 R = normalize(-reflect(L,N));
	
	// calculate attenuation
	float attenuation = 1.0/ ( constantAttenuation + 
							  (linearAttenuation*distL) + 
							  (quadraticAttenuation*distL*distL) );
	
    //black color
    vec4 black                = vec4(0.0,0.0,0.0,1.0);
	//sphere color
	float cameraIntensity     = (dot(N,E)+1.0)*0.5;
	float lightIntensity      = (dot(N,L)+1.0)*0.5;
  //float lightCameraAligment = (dot(L,E)+1.0)*0.5;
  //float shadow                = (dot(N,L)+1.0)*0.5;
	float shadow              = max( dot(N,L), 0.0 );
    //sfere color
	vec4   color1     = texture1D( atmGrad1, lightIntensity ) * 0.78;
           color1     = lerp     ( black, color1, shadow );
	       color1.a  *= texture1D( atmRim, cameraIntensity ).r;
    //day to night
	vec4   color2     = texture1D( atmGrad2, lightIntensity );
           color2     = lerp     ( black, color2, max( dot(N,L)*8.0, 0.0 ) ) * 0.65;
    //mix
	vec4 outcolor     = lerp( color2, color1, min(color2.r, 1.0) ) * attenuation;
                     // lerp ( color2, color1, lightCameraAligment) * attenuation;
         
    //output 
    outcolor(outcolor);
}
