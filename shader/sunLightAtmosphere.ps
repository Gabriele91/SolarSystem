uniform sampler1D atmGrad1;
uniform sampler1D atmGrad2;
uniform sampler1D atmRim;

varying vec3 N;
varying vec3 v;
varying vec2 varTexCoord;
varying float constantAttenuation;
varying float linearAttenuation;
varying float quadraticAttenuation;

void main (void)
{

	//calculate pos linght
	vec3 posL = gl_LightSource[0].position.xyz - v;
	//calculate distance
	float distL = length(posL); 
	//directions
	vec3 L = normalize( posL ); 
	vec3 E = normalize(-v); // we are in Eye Coordinates, so EyePos is (0,0,0)
	vec3 R = normalize(-reflect(L,N));
	
	// calculate attenuation
	float attenuation = 1.0/ ( constantAttenuation + 
							  (linearAttenuation*distL) + 
							  (quadraticAttenuation*distL*distL) );
	
	//sphere color
	float cameraIntensity = (dot(N,E)+1.0)*0.5;
	float lightIntensity = (dot(N,L)+1.0)*0.5;
	float lightCameraAligment = (dot(L,E)+1.0)*0.5;
	float shadow              = dot(N,L)+1.0*0.25;
	vec4 color1     = texture1D( atmGrad1, lightIntensity );
	vec4 color2     = texture1D( atmGrad2, lightIntensity );
	gl_FragColor    = lerp ( color2, color1, lightCameraAligment)*attenuation;
	gl_FragColor    = lerp(vec4(0.0,0.0,0.0,1.0),gl_FragColor,shadow);
	gl_FragColor.a *= texture1D( atmRim, cameraIntensity ).r;
}
